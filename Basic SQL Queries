-- 1. Retrieve patient details along with their latest medical record:
SELECT p.patient_id, p.patient_name, p.date_of_birth, m.record_id, m.record_date, m.diagnosis
FROM Patients p
LEFT JOIN (
    SELECT patient_id, MAX(record_date) AS latest_record_date
    FROM MedicalRecords
    GROUP BY patient_id
) latest ON p.patient_id = latest.patient_id
LEFT JOIN MedicalRecords m ON latest.patient_id = m.patient_id AND latest.latest_record_date = m.record_date;

-- 2. Find doctors who have the highest number of appointments:
SELECT d.doctor_id, d.doctor_name, COUNT(a.appointment_id) AS num_appointments
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY d.doctor_id
ORDER BY num_appointments DESC
LIMIT 1;

-- 3. List patients who have not had any appointments:
SELECT p.patient_id, p.patient_name
FROM Patients p
LEFT JOIN Appointments a ON p.patient_id = a.patient_id
WHERE a.appointment_id IS NULL;

-- 4. Calculate the average number of appointments per patient:
SELECT AVG(num_appointments) AS avg_appointments_per_patient
FROM (
    SELECT patient_id, COUNT(appointment_id) AS num_appointments
    FROM Appointments
    GROUP BY patient_id
) AS appointment_counts;

-- 5. Identify patients who have multiple medical records on the same day:
SELECT patient_id, COUNT(record_id) AS num_records_on_same_day
FROM (
    SELECT patient_id, record_date, COUNT(record_id) AS num_records
    FROM MedicalRecords
    GROUP BY patient_id, record_date
    HAVING COUNT(record_id) > 1
) AS records_on_same_day
GROUP BY patient_id;

-- 6. Find doctors who have no appointments scheduled for next week:
SELECT d.doctor_id, d.doctor_name
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id AND a.appointment_date BETWEEN CURDATE() + INTERVAL 1 DAY AND CURDATE() + INTERVAL 7 DAY
WHERE a.appointment_id IS NULL;

-- 7. Retrieve patients and their corresponding doctors based on appointments:
SELECT p.patient_name, d.doctor_name, a.appointment_date
FROM Patients p
INNER JOIN Appointments a ON p.patient_id = a.patient_id
INNER JOIN Doctors d ON a.doctor_id = d.doctor_id;

-- 8. Count the number of distinct medical conditions recorded:
SELECT COUNT(DISTINCT diagnosis) AS num_distinct_conditions
FROM MedicalRecords;

-- 9. Calculate the total revenue generated by each doctor (assuming revenue per appointment):
SELECT d.doctor_id, d.doctor_name, SUM(p.payment_amount) AS total_revenue
FROM Doctors d
INNER JOIN Appointments a ON d.doctor_id = a.doctor_id
INNER JOIN Payments p ON a.appointment_id = p.appointment_id
GROUP BY d.doctor_id, d.doctor_name;

-- 10. Find patients who visited more than one doctor:
SELECT patient_id, COUNT(DISTINCT doctor_id) AS num_unique_doctors_visited
FROM Appointments
GROUP BY patient_id
HAVING COUNT(DISTINCT doctor_id) > 1;
